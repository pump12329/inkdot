# 优化后的 pre-commit hook
echo "🔍 Running optimized pre-commit checks..."

# 获取是否有暂存的代码文件
STAGED_CODE_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(vue|js|ts|jsx|tsx)$' | wc -l)
STAGED_DOCS_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.md$' | wc -l)

echo "📊 Found $STAGED_CODE_FILES code files and $STAGED_DOCS_FILES documentation files staged"

# 1. 快速格式化检查 (lint-staged) - 并行执行
echo "📝 Step 1: Running lint-staged (parallel execution)..."
START_TIME=$(date +%s%N)
npx lint-staged --quiet
LINT_STATUS=$?
END_TIME=$(date +%s%N)
LINT_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))

if [ $LINT_STATUS -ne 0 ]; then
  echo "❌ Lint-staged failed (${LINT_TIME}ms)"
  exit 1
fi
echo "✅ Lint-staged passed (${LINT_TIME}ms)"

# 2. TypeScript 类型检查 - 只在有代码文件变更时执行
if [ $STAGED_CODE_FILES -gt 0 ]; then
  echo "🔧 Step 2: TypeScript type checking..."
  START_TIME=$(date +%s%N)
  npm run type-check --silent
  TS_STATUS=$?
  END_TIME=$(date +%s%N)
  TS_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))

  if [ $TS_STATUS -ne 0 ]; then
    echo "❌ TypeScript check failed (${TS_TIME}ms)"
    exit 1
  fi
  echo "✅ TypeScript check passed (${TS_TIME}ms)"
else
  echo "⏭️  Skipping TypeScript check (no code files changed)"
fi

# 3. 构建检查 - 只在有代码文件变更时执行，且使用缓存
if [ $STAGED_CODE_FILES -gt 0 ]; then
  echo "🏗️  Step 3: Optimized build verification..."
  START_TIME=$(date +%s%N)

  # 检查是否有构建缓存
  if [ -d "dist" ] && [ "$STAGED_CODE_FILES" -lt 5 ]; then
    echo "📦 Using incremental build (few files changed)"
    npm run build --silent >/dev/null 2>&1
  else
    npm run build --silent
  fi

  BUILD_STATUS=$?
  END_TIME=$(date +%s%N)
  BUILD_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))

  if [ $BUILD_STATUS -ne 0 ]; then
    echo "❌ Build check failed (${BUILD_TIME}ms)"
    exit 1
  fi
  echo "✅ Build check passed (${BUILD_TIME}ms)"
else
  echo "⏭️  Skipping build check (no code files changed)"
fi

# 4. 快速测试 - 只在有相关文件变更时执行
if [ $STAGED_CODE_FILES -gt 0 ]; then
  echo "🧪 Step 4: Quick unit tests..."
  START_TIME=$(date +%s%N)
  npm run test:unit --silent --run
  TEST_STATUS=$?
  END_TIME=$(date +%s%N)
  TEST_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))

  if [ $TEST_STATUS -ne 0 ]; then
    echo "❌ Unit tests failed (${TEST_TIME}ms)"
    exit 1
  fi
  echo "✅ Unit tests passed (${TEST_TIME}ms)"
else
  echo "⏭️  Skipping unit tests (no code files changed)"
fi

# 5. Playwright 快速UI测试 - 只在有UI相关文件变更时执行
STAGED_UI_FILES=$(git diff --cached --name-only --diff-filter=ACM | grep -E '\.(vue|css|scss|less)$' | wc -l)
if [ $STAGED_UI_FILES -gt 0 ]; then
  echo "🎭 Step 5: Quick Playwright UI tests..."
  START_TIME=$(date +%s%N)

  # 检查是否在CI环境或用户设置了跳过Playwright
  if [ "$CI" = "true" ] || [ "$SKIP_PLAYWRIGHT" = "true" ]; then
    echo "⏭️  Skipping Playwright tests (CI or SKIP_PLAYWRIGHT=true)"
  else
    # 运行快速UI测试（基于构建文件的静态测试）
    if node tools/playwright/quick-ui-test.js 2>/dev/null; then
      PLAYWRIGHT_STATUS=0
      echo "✅ Playwright UI tests passed"
    else
      PLAYWRIGHT_STATUS=$?
      echo "⚠️  Playwright UI tests failed (but not blocking commit)"
      echo "   💡 Run manually: npm run test:playwright:debug"
      echo "   💡 Or run quick test: node tools/playwright/quick-ui-test.js"
    fi
    END_TIME=$(date +%s%N)
    PLAYWRIGHT_TIME=$(( ($END_TIME - $START_TIME) / 1000000 ))
    echo "⏱️  Playwright tests completed in ${PLAYWRIGHT_TIME}ms"
  fi
else
  echo "⏭️  Skipping Playwright tests (no UI files changed)"
fi

# 计算总耗时
TOTAL_END_TIME=$(date +%s%N)
TOTAL_TIME=$(( ($TOTAL_END_TIME - $(echo "$START_TIME" | sed 's/[^0-9]//g')) * -1 / 1000000 ))
echo "🎉 All pre-commit checks passed! Total time: ${TOTAL_TIME}ms"
echo ""
echo "💡 Tips:"
echo "   - Full test suite: npm run test:run"
echo "   - Coverage report: npm run test:coverage"
echo "   - Playwright tests: npm run test:playwright:all"
echo "   - Skip Playwright: export SKIP_PLAYWRIGHT=true"