---
alwaysApply: true
---

# 前端开发规范

## 技术栈

- **Vue 3** + **TypeScript** + **Pinia** + **Vite**
- **样式**: CSS + 自定义组件库（基于墨点Logo设计）
- **图标**: Lucide Vue Next

## Vue 3 开发规范

### 核心规范

- **使用Composition API**：避免Options API，保持代码简洁
- **使用`<script setup>`语法**：减少样板代码
- **组件名使用PascalCase**：保持命名一致性
- **Props使用defineProps，Emits使用defineEmits**：明确的接口定义
- **使用ref/reactive进行响应式数据管理**：避免过度复杂的状态管理
- **组件职责单一**：每个组件只负责一个功能
- **避免深层嵌套**：保持组件结构扁平化
- **优先使用组合式函数**：提高代码复用性

### 组件示例

```vue
<script setup lang="ts">
import { ref, computed } from 'vue';
import type { MindMapNode } from '@/types';

interface Props {
  node: MindMapNode;
  editable?: boolean;
}

const props = withDefaults(defineProps<Props>(), {
  editable: false
});

const emit = defineEmits<{
  update: [node: MindMapNode];
  delete: [nodeId: string];
}>();

const isEditing = ref(false);
const nodeContent = ref(props.node.content);
</script>
```

## TypeScript 开发规范

### 类型规范

- 使用严格模式 `"strict": true`
- 所有函数必须有明确的返回类型
- 使用接口定义数据结构，避免any类型
- 优先使用type而不是interface，除非需要继承
- 使用泛型提高代码复用性

### 代码示例

```typescript
// 好的示例
interface MindMapNode {
  id: string;
  content: string;
  position: { x: number; y: number };
  connections: string[];
}

function createNode(data: Partial<MindMapNode>): MindMapNode {
  return {
    id: generateId(),
    content: data.content || '',
    position: data.position || { x: 0, y: 0 },
    connections: data.connections || []
  };
}
```

## 文件命名规范

- **组件文件使用PascalCase**: `MindMapNode.vue`
- **工具函数文件使用camelCase**: `nodeUtils.ts`
- **类型定义文件使用camelCase**: `mindMapTypes.ts`
- **常量文件使用UPPER_CASE**: `API_CONSTANTS.ts`
- **避免过长的文件名**：保持简洁明了
- **使用描述性名称**：文件名应该清楚表达内容
- **避免缩写**：除非是广泛认知的缩写
- **保持一致性**：相同类型的文件使用相同的命名模式

## 组件设计原则

### 思维导图组件设计原则

- **核心功能优先**：节点展示、编辑、连接是核心功能
- **层级结构清晰**：支持折叠/展开，但避免过深嵌套
- **交互简化**：拖拽、点击、键盘快捷键，避免复杂手势
- **视觉极简**：使用Canvas/SVG，避免复杂视觉效果
- **渐进式功能**：高级功能（如AI辅助）按需启用

### 工作区组件设计原则

- **仿照Cursor设计风格**：专业且简洁的界面
- **智能布局管理**：标签页和侧边栏可折叠，节省空间
- **功能渐进披露**：项目和AI面板按需显示
- **用户偏好记忆**：记住布局设置，减少重复配置
- **响应式适配**：桌面端功能完整，移动端功能精简

### 基础UI组件设计原则

- **基于墨点Logo设计风格**：统一的视觉语言
- **极简色彩系统**：黑白灰为主，品牌色点缀
- **统一字体系统**：系统字体优先，确保跨平台一致性
- **组件职责单一**：每个组件只负责一个功能
- **无障碍设计**：支持键盘导航和屏幕阅读器

## ESLint代码质量规范

### 必须遵循的规则

- **禁止使用any类型**：使用具体类型、泛型或unknown
- **处理未使用变量**：移除或使用下划线前缀标记
- **正确声明全局变量**：browser/node环境变量需要适当的类型声明
- **Switch语句作用域**：使用花括号包装case块避免词法声明冲突
- **安全的属性访问**：使用Object.hasOwn()或in操作符而不是hasOwnProperty
- **Unicode正则表达式**：处理中文字符时使用/u标志

### 类型安全要求

```typescript
// ✅ 正确：明确类型
interface UserData {
  id: string;
  name: string;
}

// ✅ 正确：泛型使用
function processData<T>(data: T): T {
  return data;
}

// ✅ 正确：未使用参数处理
try {
  riskyOperation();
} catch (_error) {
  // 使用_前缀表示未使用
  showErrorMessage('操作失败');
}

// ✅ 正确：Switch语句
switch (type) {
  case 'A': {
    const result = processA();
    return result;
  }
  case 'B': {
    const result = processB();
    return result;
  }
}
```

### 环境变量规范

```typescript
// 浏览器环境 - 可直接使用
console.log('浏览器API');
localStorage.setItem('key', 'value');

// Node.js环境 - 需要声明
declare global {
  namespace NodeJS {
    interface Global {
      // 全局变量声明
    }
  }
}
```

## 代码质量检查

- **提交前必须**：运行 `npm run lint` 检查
- **自动修复**：使用 `npm run lint:fix` 修复
- **类型检查**：运行 `npm run type-check` 确保类型安全
- **代码错误太多直接重写**
- **代码变成屎山时请给出重构建议**
