---
alwaysApply: true
---

# 开发工作流程

## 🔄 日常开发流程

### 1. 开始新功能
```bash
# 1. 创建功能分支
git checkout -b feature/new-feature

# 2. 更新依赖（如需要）
npm install

# 3. 启动开发服务器
npm run dev

# 4. 运行测试
npm run test:watch
```

### 2. 开发过程
```bash
# 1. 编写代码
# 2. 运行类型检查
npm run type-check

# 3. 运行代码检查
npm run lint

# 4. 运行测试
npm run test

# 5. 提交代码
git add .
git commit -m "feat: 添加新功能"
```

### 3. 完成功能
```bash
# 1. 最终测试
npm run test:run
npm run build

# 2. 更新文档
npm run docs:update

# 3. 推送代码
git push origin feature/new-feature

# 4. 创建PR
# 5. 代码审查
# 6. 合并到主分支
```

## 📝 提交规范

### 提交信息格式
```
type(scope): description

feat: 新功能
fix: 修复bug
docs: 文档更新
style: 代码格式
refactor: 重构
test: 测试
chore: 构建工具
```

### 提交示例
```bash
# 新功能
git commit -m "feat(mindmap): 添加节点拖拽功能"

# 修复bug
git commit -m "fix(ai): 修复DeepSeek API调用错误"

# 文档更新
git commit -m "docs(readme): 更新安装说明"

# 重构
git commit -m "refactor(components): 重构MindMapNode组件"
```

## 🧪 测试流程

### 单元测试
```bash
# 运行所有测试
npm run test

# 监听模式
npm run test:watch

# 覆盖率报告
npm run test:coverage

# 特定测试
npm run test tests/unit/mindmap/
```

### 集成测试
```bash
# 运行集成测试
npm run test:integration

# 特定集成测试
npm run test tests/integration/ai/
```

### 端到端测试
```bash
# 运行E2E测试
npm run test:e2e

# 特定E2E测试
npm run test:e2e tests/e2e/mindmap/
```

## 🔍 代码审查

### 审查清单
- [ ] 代码符合规范
- [ ] 功能实现正确
- [ ] 错误处理完善
- [ ] 性能考虑合理
- [ ] 测试覆盖充分
- [ ] 文档更新完整

### 审查要点
1. **代码质量**
   - 可读性
   - 可维护性
   - 性能
   - 安全性

2. **功能正确性**
   - 需求满足
   - 边界条件
   - 错误处理
   - 用户体验

3. **架构设计**
   - 模块化
   - 可扩展性
   - 可测试性
   - 一致性

## 🚀 发布流程

### 版本管理
```bash
# 1. 更新版本号
npm version patch  # 补丁版本
npm version minor  # 小版本
npm version major  # 大版本

# 2. 更新CHANGELOG
npm run changelog:update

# 3. 构建生产版本
npm run build

# 4. 运行生产测试
npm run test:production

# 5. 发布
npm publish
```

### 发布检查清单
- [ ] 版本号更新
- [ ] CHANGELOG更新
- [ ] 所有测试通过
- [ ] 构建成功
- [ ] 文档完整
- [ ] 性能测试通过

## 🔧 调试流程

### 开发调试
```bash
# 1. 启动开发服务器
npm run dev

# 2. 打开浏览器开发者工具
# 3. 设置断点
# 4. 使用Vue DevTools
# 5. 查看控制台输出
```

### 生产调试
```bash
# 1. 构建调试版本
npm run build:debug

# 2. 部署到测试环境
# 3. 使用远程调试工具
# 4. 查看错误日志
# 5. 性能分析
```

## 📊 性能监控

### 开发阶段
```bash
# 1. 运行性能测试
npm run test:performance

# 2. 分析包大小
npm run build:analyze

# 3. 监控内存使用
# 4. 检查渲染性能
```

### 生产阶段
- 监控页面加载时间
- 监控API响应时间
- 监控错误率
- 监控用户行为

## 🛠️ 工具使用

### 开发工具
- **VSCode/Cursor**: 代码编辑器
- **Vue DevTools**: Vue调试工具
- **Chrome DevTools**: 浏览器调试
- **Git**: 版本控制

### 构建工具
- **Vite**: 构建工具
- **TypeScript**: 类型检查
- **ESLint**: 代码检查
- **Vitest**: 测试框架

### 部署工具
- **Docker**: 容器化
- **Nginx**: 反向代理
- **PM2**: 进程管理
- **CI/CD**: 持续集成

## 📋 日常检查

### 每日开始
- [ ] 拉取最新代码
- [ ] 检查依赖更新
- [ ] 运行测试套件
- [ ] 查看待办事项

### 每日结束
- [ ] 提交代码
- [ ] 更新文档
- [ ] 记录问题
- [ ] 计划明天工作

### 每周回顾
- [ ] 代码质量评估
- [ ] 性能指标检查
- [ ] 技术债务清理
- [ ] 学习计划制定