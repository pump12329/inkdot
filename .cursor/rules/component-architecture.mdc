---
description: Vue组件架构设计规范，包含组件分层、通信模式、样式规范、性能优化等组件开发指导
alwaysApply: true
---

# 组件架构规范

## 组件设计原则

### 单一职责原则

- **明确边界**: 每个组件只负责一个核心功能
- **高内聚**: 相关功能集中在同一组件内
- **低耦合**: 组件间依赖关系最小化
- **可复用**: 组件设计考虑多场景复用

### 组件分层架构

```
├── Layout Components (布局组件)
│   ├── AppLayout.vue         # 主应用布局
│   ├── WorkspaceSidebar.vue  # 左侧工作区
│   ├── SidePanel.vue         # 右侧面板
│   └── StatusBar.vue         # 状态栏
│
├── Feature Components (功能组件)
│   ├── MindMapCanvas.vue     # 思维导图画布
│   ├── FloatingToolbar.vue   # 悬浮工具栏
│   ├── ChatPanel.vue         # 聊天面板
│   ├── AgentPanel.vue        # AI代理面板
│   └── PropertiesPanel.vue   # 属性面板
│
├── UI Components (基础UI组件)
│   ├── Button.vue            # 按钮
│   ├── Input.vue             # 输入框
│   ├── Modal.vue             # 模态框
│   ├── Tooltip.vue           # 提示框
│   └── IconButton.vue        # 图标按钮
│
└── Business Components (业务组件)
    ├── MindMapNode.vue       # 思维导图节点
    ├── NodeEditor.vue        # 节点编辑器
    ├── FileTree.vue          # 文件树
    └── TemplateCard.vue      # 模板卡片
```

## 核心组件规范

### 悬浮工具栏 (FloatingToolbar)

- **功能**: 主要操作工具的集中入口
- **位置**: 顶部中央悬浮
- **组织**: 按功能分组，用分隔线区分
- **响应式**: 小屏幕时部分工具移至底部
- **状态管理**: 工具状态与全局state同步

### 工作区侧边栏 (WorkspaceSidebar)

- **功能**: 项目资源管理和导航
- **交互**: 支持折叠/展开，拖拽调整宽度
- **分区**: 文件、思维导图、模板、素材、历史
- **搜索**: 内置搜索功能快速定位
- **上下文菜单**: 右键操作支持

### 思维导图画布 (MindMapCanvas)

- **核心**: SVG/Canvas混合渲染
- **性能**: 视口裁剪，只渲染可见区域
- **交互**: 拖拽、缩放、选择、连接
- **层级**: 背景层/连接层/节点层/UI层
- **事件**: 统一的事件系统和状态管理

### 聊天面板 (ChatPanel)

- **界面**: 类似现代IM的对话体验
- **功能**: AI对话、历史记录、上下文理解
- **输入**: 支持Markdown、文件上传、@mention
- **响应**: 流式响应显示、错误重试
- **记忆**: 对话历史持久化存储

### AI代理面板 (AgentPanel)

- **代理管理**: 不同AI代理的可视化管理
- **快速操作**: 一键执行常用AI功能
- **进度显示**: AI任务执行进度和状态
- **结果展示**: AI生成内容的预览和应用
- **配置**: AI模型参数和行为配置

## 组件通信规范

### Props设计原则

- **类型安全**: 使用TypeScript接口定义Props
- **默认值**: 合理的默认值设置
- **验证**: 必要时添加prop验证
- **文档**: 每个prop都有清晰的说明

### Events规范

- **命名**: 使用kebab-case，语义明确
- **参数**: 传递必要的数据，避免过度传递
- **类型**: 定义明确的事件类型
- **冒泡**: 合理控制事件冒泡

### Slots使用

- **具名插槽**: 为可定制区域提供插槽
- **作用域插槽**: 需要传递数据时使用
- **默认内容**: 提供合理的默认内容
- **文档**: 插槽用途和参数说明

### 状态管理

- **Local State**: 组件内部状态用ref/reactive
- **Shared State**: 使用Pinia管理共享状态
- **Props vs State**: 明确区分props和内部状态
- **计算属性**: 派生状态使用computed

## 样式规范

### Scoped样式

- **隔离**: 默认使用scoped样式
- **命名**: BEM命名约定
- **组织**: 样式按组件功能分组
- **复用**: 公共样式提取到单独文件

### CSS变量使用

- **主题**: 使用CSS变量支持主题切换
- **响应式**: 断点相关的变量定义
- **组件级**: 组件特有的CSS变量
- **继承**: 合理利用CSS变量继承

### 动画和过渡

- **一致性**: 使用统一的动画时长和缓动
- **性能**: 优先使用transform和opacity
- **降级**: 支持用户减少动画偏好
- **目的**: 每个动画都有明确目的

## 可访问性规范

### 语义化HTML

- **标签选择**: 使用语义化的HTML标签
- **ARIA**: 必要的ARIA属性和角色
- **焦点管理**: 合理的Tab顺序
- **键盘导航**: 支持键盘操作

### 屏幕阅读器

- **标签**: 有意义的aria-label
- **描述**: aria-describedby关联说明
- **状态**: aria-expanded等状态指示
- **实时区域**: aria-live区域更新提示

### 颜色和对比度

- **对比度**: 符合WCAG标准
- **色盲友好**: 不仅依赖颜色区分信息
- **高对比模式**: 支持系统高对比度设置
- **自定义**: 用户可调整字体大小和颜色

## 测试策略

### 单元测试

- **组件渲染**: 测试组件正确渲染
- **Props**: 测试不同props的表现
- **Events**: 测试事件正确触发
- **用户交互**: 测试用户操作响应

### 集成测试

- **组件协作**: 测试组件间的交互
- **状态同步**: 测试状态管理正确性
- **路由**: 测试路由相关功能
- **API**: 测试API调用和数据处理

### 视觉回归测试

- **快照测试**: 组件视觉输出的快照
- **跨浏览器**: 不同浏览器的渲染一致性
- **响应式**: 不同屏幕尺寸的表现
- **主题**: 不同主题下的视觉表现

## 性能优化

### 渲染优化

- **懒加载**: 非关键组件延迟加载
- **虚拟滚动**: 长列表使用虚拟滚动
- **memo化**: 防止不必要的重新渲染
- **异步组件**: 大组件异步加载

### 内存管理

- **事件清理**: 组件卸载时清理事件监听
- **定时器**: 清理setTimeout和setInterval
- **订阅**: 清理外部订阅和观察者
- **DOM引用**: 避免内存泄漏

### 代码分割

- **路由级别**: 按路由分割代码
- **组件级别**: 大组件独立打包
- **功能模块**: 按功能模块分割
- **第三方库**: vendor代码单独打包

## 开发工具

### 组件开发工具

- **Storybook**: 组件文档和展示
- **Vue DevTools**: 调试和性能分析
- **类型检查**: TypeScript严格模式
- **Lint**: ESLint和Prettier代码规范

### 文档规范

- **组件文档**: 每个组件的使用说明
- **API文档**: Props、Events、Slots文档
- **示例代码**: 常见用法示例
- **设计说明**: 设计理念和使用场景

---

**版本**: v1.0.0
**创建时间戳**: T275.2
**最后更新**: T275.2
**状态**: 🟢 CURRENT
**维护者**: InkDot开发团队
**下次审查**: T305.2

# 组件架构规范

## 组件设计原则

### 单一职责原则

- **明确边界**: 每个组件只负责一个核心功能
- **高内聚**: 相关功能集中在同一组件内
- **低耦合**: 组件间依赖关系最小化
- **可复用**: 组件设计考虑多场景复用

### 组件分层架构

```
├── Layout Components (布局组件)
│   ├── AppLayout.vue         # 主应用布局
│   ├── WorkspaceSidebar.vue  # 左侧工作区
│   ├── SidePanel.vue         # 右侧面板
│   └── StatusBar.vue         # 状态栏
│
├── Feature Components (功能组件)
│   ├── MindMapCanvas.vue     # 思维导图画布
│   ├── FloatingToolbar.vue   # 悬浮工具栏
│   ├── ChatPanel.vue         # 聊天面板
│   ├── AgentPanel.vue        # AI代理面板
│   └── PropertiesPanel.vue   # 属性面板
│
├── UI Components (基础UI组件)
│   ├── Button.vue            # 按钮
│   ├── Input.vue             # 输入框
│   ├── Modal.vue             # 模态框
│   ├── Tooltip.vue           # 提示框
│   └── IconButton.vue        # 图标按钮
│
└── Business Components (业务组件)
    ├── MindMapNode.vue       # 思维导图节点
    ├── NodeEditor.vue        # 节点编辑器
    ├── FileTree.vue          # 文件树
    └── TemplateCard.vue      # 模板卡片
```

## 核心组件规范

### 悬浮工具栏 (FloatingToolbar)

- **功能**: 主要操作工具的集中入口
- **位置**: 顶部中央悬浮
- **组织**: 按功能分组，用分隔线区分
- **响应式**: 小屏幕时部分工具移至底部
- **状态管理**: 工具状态与全局state同步

### 工作区侧边栏 (WorkspaceSidebar)

- **功能**: 项目资源管理和导航
- **交互**: 支持折叠/展开，拖拽调整宽度
- **分区**: 文件、思维导图、模板、素材、历史
- **搜索**: 内置搜索功能快速定位
- **上下文菜单**: 右键操作支持

### 思维导图画布 (MindMapCanvas)

- **核心**: SVG/Canvas混合渲染
- **性能**: 视口裁剪，只渲染可见区域
- **交互**: 拖拽、缩放、选择、连接
- **层级**: 背景层/连接层/节点层/UI层
- **事件**: 统一的事件系统和状态管理

### 聊天面板 (ChatPanel)

- **界面**: 类似现代IM的对话体验
- **功能**: AI对话、历史记录、上下文理解
- **输入**: 支持Markdown、文件上传、@mention
- **响应**: 流式响应显示、错误重试
- **记忆**: 对话历史持久化存储

### AI代理面板 (AgentPanel)

- **代理管理**: 不同AI代理的可视化管理
- **快速操作**: 一键执行常用AI功能
- **进度显示**: AI任务执行进度和状态
- **结果展示**: AI生成内容的预览和应用
- **配置**: AI模型参数和行为配置

## 组件通信规范

### Props设计原则

- **类型安全**: 使用TypeScript接口定义Props
- **默认值**: 合理的默认值设置
- **验证**: 必要时添加prop验证
- **文档**: 每个prop都有清晰的说明

### Events规范

- **命名**: 使用kebab-case，语义明确
- **参数**: 传递必要的数据，避免过度传递
- **类型**: 定义明确的事件类型
- **冒泡**: 合理控制事件冒泡

### Slots使用

- **具名插槽**: 为可定制区域提供插槽
- **作用域插槽**: 需要传递数据时使用
- **默认内容**: 提供合理的默认内容
- **文档**: 插槽用途和参数说明

### 状态管理

- **Local State**: 组件内部状态用ref/reactive
- **Shared State**: 使用Pinia管理共享状态
- **Props vs State**: 明确区分props和内部状态
- **计算属性**: 派生状态使用computed

## 样式规范

### Scoped样式

- **隔离**: 默认使用scoped样式
- **命名**: BEM命名约定
- **组织**: 样式按组件功能分组
- **复用**: 公共样式提取到单独文件

### CSS变量使用

- **主题**: 使用CSS变量支持主题切换
- **响应式**: 断点相关的变量定义
- **组件级**: 组件特有的CSS变量
- **继承**: 合理利用CSS变量继承

### 动画和过渡

- **一致性**: 使用统一的动画时长和缓动
- **性能**: 优先使用transform和opacity
- **降级**: 支持用户减少动画偏好
- **目的**: 每个动画都有明确目的

## 可访问性规范

### 语义化HTML

- **标签选择**: 使用语义化的HTML标签
- **ARIA**: 必要的ARIA属性和角色
- **焦点管理**: 合理的Tab顺序
- **键盘导航**: 支持键盘操作

### 屏幕阅读器

- **标签**: 有意义的aria-label
- **描述**: aria-describedby关联说明
- **状态**: aria-expanded等状态指示
- **实时区域**: aria-live区域更新提示

### 颜色和对比度

- **对比度**: 符合WCAG标准
- **色盲友好**: 不仅依赖颜色区分信息
- **高对比模式**: 支持系统高对比度设置
- **自定义**: 用户可调整字体大小和颜色

## 测试策略

### 单元测试

- **组件渲染**: 测试组件正确渲染
- **Props**: 测试不同props的表现
- **Events**: 测试事件正确触发
- **用户交互**: 测试用户操作响应

### 集成测试

- **组件协作**: 测试组件间的交互
- **状态同步**: 测试状态管理正确性
- **路由**: 测试路由相关功能
- **API**: 测试API调用和数据处理

### 视觉回归测试

- **快照测试**: 组件视觉输出的快照
- **跨浏览器**: 不同浏览器的渲染一致性
- **响应式**: 不同屏幕尺寸的表现
- **主题**: 不同主题下的视觉表现

## 性能优化

### 渲染优化

- **懒加载**: 非关键组件延迟加载
- **虚拟滚动**: 长列表使用虚拟滚动
- **memo化**: 防止不必要的重新渲染
- **异步组件**: 大组件异步加载

### 内存管理

- **事件清理**: 组件卸载时清理事件监听
- **定时器**: 清理setTimeout和setInterval
- **订阅**: 清理外部订阅和观察者
- **DOM引用**: 避免内存泄漏

### 代码分割

- **路由级别**: 按路由分割代码
- **组件级别**: 大组件独立打包
- **功能模块**: 按功能模块分割
- **第三方库**: vendor代码单独打包

## 开发工具

### 组件开发工具

- **Storybook**: 组件文档和展示
- **Vue DevTools**: 调试和性能分析
- **类型检查**: TypeScript严格模式
- **Lint**: ESLint和Prettier代码规范

### 文档规范

- **组件文档**: 每个组件的使用说明
- **API文档**: Props、Events、Slots文档
- **示例代码**: 常见用法示例
- **设计说明**: 设计理念和使用场景

---

**版本**: v1.0.0
**创建时间戳**: T275.2
**最后更新**: T275.2
**状态**: 🟢 CURRENT
**维护者**: InkDot开发团队
**下次审查**: T305.2
