---
alwaysApply: true
---

# 后端开发规范

## API设计规范

### RESTful API原则
- **使用标准HTTP方法和状态码**：遵循REST约定
- **统一的响应格式**：简化客户端处理逻辑
- **智能请求验证**：只验证必要的参数
- **简洁的错误响应**：错误信息清晰简洁
- **按需分页和过滤**：避免返回过多数据

### API响应格式
```typescript
// API响应格式
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: {
    code: string;
    message: string;
  };
  meta?: {
    total: number;
    page: number;
    limit: number;
  };
}
```

## 错误处理规范

### 错误处理原则
- **全局错误捕获**：统一的错误处理机制
- **用户友好提示**：错误信息简洁明了，避免技术术语
- **智能错误分类**：区分用户错误和系统错误
- **最小化干扰**：错误处理不干扰用户的正常操作
- **错误日志简化**：只记录必要的调试信息

### 错误处理示例
```typescript
// 错误处理示例
class AppError extends Error {
  constructor(
    message: string,
    public code: string,
    public userMessage: string
  ) {
    super(message)
    this.name = 'AppError'
  }
}

function handleError(error: Error) {
  if (error instanceof AppError) {
    showUserMessage(error.userMessage)
  } else {
    console.error('系统错误:', error)
    showUserMessage('系统出现错误，请稍后重试')
  }
}
```

## 数据安全原则
- **敏感数据加密存储**：保护用户隐私
- **API密钥安全管理**：避免硬编码和泄露
- **输入验证简化**：只验证必要的用户输入
- **防止常见攻击**：XSS、注入攻击等
- **安全配置简化**：默认安全配置，减少配置负担

## 环境配置原则
- **环境变量管理配置**：简化配置管理
- **环境区分简化**：开发、测试、生产环境配置清晰
- **配置验证简化**：只验证关键配置项
- **热更新支持**：减少重启需求
- **默认配置合理**：开箱即用的配置

## 构建优化原则
- **代码分割智能**：按需分割，避免过度分割
- **资源压缩优化**：平衡压缩率和加载速度
- **开发代码清理**：移除调试代码和注释
- **包大小控制**：避免引入不必要的依赖