---
description: 项目技术栈架构设计规范，定义SPA架构、状态管理、数据存储等核心架构原则
alwaysApply: true
---

# 架构设计规范

## 技术栈

### 前端技术栈

- **框架**: Vue 3.5.21 + TypeScript 5.9.2
- **构建工具**: Vite 7.0.0
- **状态管理**: Pinia 3.0.3
- **图标库**: Lucide Vue Next 0.544.0
- **样式**: CSS + 自定义组件库（基于墨点Logo设计）

### 开发工具

- **类型检查**: vue-tsc 3.0.7
- **代码检查**: ESLint 9.36.0 + Prettier 3.6.2
- **测试框架**: Vitest 3.2.4 + Playwright 1.55.1
- **Git工具**: Husky 9.1.7 + lint-staged 16.1.6

### AI集成

- **主要API**: DeepSeek API + OpenRouter API
- **集成方式**: 原生API调用（暂未使用LangChain）
- **配置管理**: 环境变量 + 本地配置

### 数据存储

- **本地存储**: localStorage + sessionStorage
- **文件格式**: JSON + Markdown
- **状态持久化**: Pinia持久化插件

## SPA架构设计原则

### 单页面应用优势

- **流畅体验**: 无页面刷新，快速响应和即时反馈
- **统一风格**: 一致的视觉风格和交互模式
- **性能优化**: 减少服务器负载和网络请求
- **状态管理**: 全局状态集中管理，用户体验连续

### 路由设计规范

- **Vue Router管理**: 使用Vue Router进行客户端路由管理
- **路由结构简洁**: 避免深层嵌套，保持路由结构清晰
- **懒加载优化**: 实现路由懒加载提升性能
- **浏览器兼容**: 支持浏览器前进后退功能

### 状态管理规范

- **Pinia集中管理**: 全局状态通过Pinia集中管理
- **组件状态传递**: 组件间状态传递简洁高效
- **状态持久化**: 确保用户体验连续性
- **响应式绑定**: 实现实时数据更新

#### Pinia Store设计原则

- **按功能模块划分Store**：避免单一庞大的Store
- **使用组合式API风格**：保持代码简洁和可读性
- **智能数据持久化**：只持久化必要的用户数据
- **状态同步简化**：避免复杂的状态同步逻辑
- **错误状态处理**：统一的错误处理和恢复机制

#### Store示例

```typescript
// 示例Store
export const useMindMapStore = defineStore('mindMap', () => {
  const nodes = ref<MindMapNode[]>([]);
  const selectedNodeId = ref<string | null>(null);

  const selectedNode = computed(() => nodes.value.find(node => node.id === selectedNodeId.value));

  function addNode(node: MindMapNode) {
    nodes.value.push(node);
  }

  function updateNode(id: string, updates: Partial<MindMapNode>) {
    const index = nodes.value.findIndex(node => node.id === id);
    if (index !== -1) {
      nodes.value[index] = { ...nodes.value[index], ...updates };
    }
  }

  return {
    nodes: readonly(nodes),
    selectedNodeId,
    selectedNode,
    addNode,
    updateNode
  };
});
```

### 组件化设计

- **模块化结构**: 高度模块化的组件结构
- **可复用组件**: 建立可复用的UI组件库
- **职责单一**: 组件职责单一，耦合度低
- **按需加载**: 支持组件懒加载和按需引入

## 项目目录结构

### 实际项目结构

```
inkdot/
├── src/                        # 源代码目录
│   ├── components/             # Vue组件
│   ├── stores/                 # Pinia状态管理
│   ├── types/                  # TypeScript类型定义
│   ├── utils/                  # 工具函数
│   ├── views/                  # 页面组件
│   ├── assets/                 # 静态资源
│   ├── App.vue                 # 主应用组件
│   └── main.ts                 # 应用入口文件
├── docs/                       # 项目文档
│   ├── development/            # 开发相关文档
│   ├── tools/                  # 文档工具
│   │   ├── timestamp-helper.js     # 时间戳管理
│   │   ├── changelog-helper.js     # 变更日志管理
│   │   ├── change-entry-helper.js  # 变更追踪
│   │   └── status-update-helper.js # 状态更新
│   └── PROJECT_STRUCTURE.md   # 项目结构文档
├── tools/                      # 项目工具
│   ├── playwright/             # Playwright测试工具
│   │   ├── run-tests.js        # 测试运行器
│   │   └── README.md           # 使用说明
│   └── cleanup.js              # 清理工具
├── tests/                      # 测试文件
│   ├── unit/                   # 单元测试
│   ├── integration/            # 集成测试
│   ├── e2e/                    # 端到端测试
│   └── performance/            # 性能测试
├── scripts/                    # 脚本文件
│   └── setup-dev-environment.js   # 开发环境设置
├── .cursor/                    # Cursor IDE配置
│   └── rules/                  # 开发规则
├── .github/                    # GitHub配置
│   └── workflows/              # CI/CD工作流
├── public/                     # 公共资源
├── dist/                       # 构建输出（.gitignore）
├── node_modules/               # 依赖包（.gitignore）
├── package.json                # 项目配置
├── tsconfig.json               # TypeScript配置
├── vite.config.ts              # Vite配置
├── eslint.config.js            # ESLint配置
├── playwright.config.ts        # Playwright配置
├── vitest.config.ts            # Vitest配置
└── README.md                   # 项目说明
```

### 源代码组织原则

- **components/**: 可复用的Vue组件
- **stores/**: Pinia状态管理模块
- **types/**: TypeScript类型定义
- **utils/**: 纯函数工具库
- **views/**: 页面级组件
- **assets/**: 静态资源文件

### 工具目录说明

- **docs/tools/**: 文档管理和自动化工具
- **tools/**: 项目开发和测试工具
- **scripts/**: 项目维护和设置脚本
- **tests/**: 各类测试文件和配置
