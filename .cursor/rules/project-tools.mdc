---
description: 项目工具使用规范，包含时间戳管理、文档工具、测试工具、构建工具等开发工具使用指导
alwaysApply: true
version: v2.1.0
lastUpdated: T275.1
---

# 项目工具规范

## 📋 工具概述

InkDot项目集成了多种开发和维护工具，本规范定义了这些工具的使用方法和最佳实践。

## 🕐 时间戳管理工具

### 基本命令

```bash
# 获取当前时间戳
npm run timestamp:current

# 扫描项目中的时间戳
npm run timestamp:scan

# 批量更新时间戳
npm run timestamp:batch

# 修复时间戳头部
npm run timestamp:fix

# 查找Markdown文件
npm run timestamp:find
```

### 文档更新命令

```bash
# 更新指定文档的时间戳
npm run docs:update <文档路径>

# 添加文档头部信息
npm run docs:header

# 扫描文档状态
npm run docs:scan

# 批量更新文档
npm run docs:batch

# 修复文档头部
npm run docs:fix
```

### 使用规范

- **每次修改文档时**：必须使用 `npm run docs:update` 更新时间戳
- **批量操作前**：先运行 `npm run docs:scan` 检查状态
- **提交前检查**：确保所有文档头部信息完整

## 📝 变更日志管理

### 基本命令

```bash
# 更新CHANGELOG
npm run changelog:update

# 添加变更条目
npm run changelog:add

# 版本管理
npm run changelog:version

# 检查状态
npm run changelog:status

# 查看帮助
npm run changelog:help
```

### 使用流程

1. **开发完成后**：`npm run changelog:add` 添加变更描述
2. **发版前**：`npm run changelog:version` 创建版本记录
3. **检查状态**：`npm run changelog:status` 验证完整性

## 🔄 变更追踪工具

### 自动化命令

```bash
# 自动检测变更
npm run change:auto

# 交互式添加变更
npm run change:interactive

# 检测代码变更
npm run change:detect

# 手动添加变更
npm run change:add

# 扫描项目变更
npm run change:scan
```

### 变更分类

- **feat**: 新功能
- **fix**: 修复问题
- **docs**: 文档更新
- **style**: 代码格式
- **refactor**: 重构
- **test**: 测试相关
- **chore**: 构建工具

## 📊 状态更新工具

### 状态管理命令

```bash
# 更新项目状态
npm run status:update

# 扫描状态信息
npm run status:scan

# 检查状态一致性
npm run status:check

# 查看状态帮助
npm run status:help
```

### 状态类型

- **🟢 CURRENT**: 当前有效
- **🟡 PENDING**: 待更新
- **🔴 OUTDATED**: 需要更新
- **⚫ DEPRECATED**: 已废弃

## 🛠️ 开发环境设置

### 环境设置命令

```bash
# 自动设置开发环境
npm run setup

# 仅设置开发环境
npm run setup:dev
```

### 设置包含内容

- ✅ 检查系统环境要求 (Node.js ≥ 18.0.0)
- ✅ 安装项目依赖
- ✅ 配置Git hooks
- ✅ 设置环境变量 (.env.local)
- ✅ 验证开发环境

### 环境要求

- **Node.js**: ≥ 18.0.0
- **npm**: ≥ 8.0.0
- **Git**: ≥ 2.30.0

## 🧪 测试工具集成

### Playwright测试工具

```bash
# 运行所有Playwright测试
npm run test:playwright:all

# 字体支持测试
npm run test:playwright:fonts

# 按钮交互测试
npm run test:playwright:buttons

# 中文渲染测试
npm run test:playwright:chinese

# 调试模式
npm run test:playwright:debug
```

### 测试工具特点

- **跨浏览器支持**: Chrome、Firefox、Safari
- **中文字体测试**: 验证不同环境下的中文显示
- **可视化调试**: 支持截图和录制
- **性能监控**: 内存和渲染性能测试

## 🧹 项目清理工具

### 清理命令

```bash
# 清理项目文件
npm run cleanup

# 同cleanup的别名
npm run clean
```

### 清理范围

- 临时文件和缓存
- 测试生成的文件
- 构建产物
- 日志文件
- 无用的依赖

## 🔍 代码质量工具

### 代码检查

```bash
# ESLint检查
npm run lint

# 自动修复代码风格
npm run lint:fix

# Prettier格式化
npm run format

# 检查格式
npm run format:check

# TypeScript类型检查
npm run type-check
```

### 质量标准

- **ESLint**: 无错误和警告
- **Prettier**: 代码格式统一
- **TypeScript**: 类型检查通过
- **测试覆盖率**: ≥ 70%

## 🚀 构建和部署工具

### 构建命令

```bash
# 启动开发服务器
npm run dev

# 构建生产版本
npm run build

# 预览构建结果
npm run preview
```

### 构建优化

- **代码分割**: 按需加载
- **资源压缩**: 最小化文件大小
- **类型检查**: 构建前验证
- **依赖分析**: 优化包大小

## 📋 工具使用最佳实践

### 日常开发流程

1. **开始开发**：`npm run setup` 设置环境
2. **编写代码**：使用相应的工具检查质量
3. **更新文档**：`npm run docs:update` 更新时间戳
4. **记录变更**：`npm run change:auto` 自动记录
5. **运行测试**：`npm run test` 验证功能
6. **提交代码**：Git hooks自动执行检查

### 发布前检查

1. **代码质量**：`npm run lint` 和 `npm run type-check`
2. **测试通过**：`npm run test:run` 所有测试
3. **构建成功**：`npm run build` 生产构建
4. **文档更新**：`npm run docs:scan` 检查文档状态
5. **变更记录**：`npm run changelog:status` 确认记录

### 故障排除

```bash
# 清理项目后重新安装
npm run clean
npm install

# 重新设置开发环境
npm run setup:dev

# 检查工具状态
npm run status:check
```

## ⚠️ 注意事项

### 工具依赖

- 确保Node.js版本满足要求 (≥ 18.0.0)
- 定期更新工具依赖版本
- 在Docker环境中安装必要的系统依赖

### 使用限制

- 时间戳工具仅适用于Markdown文件
- 测试工具需要图形界面支持（或Xvfb）
- 某些工具可能需要网络连接

### 性能考虑

- 大型项目的批量操作可能耗时较长
- 测试工具会消耗较多系统资源
- 定期清理临时文件避免占用空间

---

**版本**: v1.0.0
**创建时间戳**: T275.1
**最后更新**: T275.1
**状态**: 🟢 CURRENT
**维护者**: InkDot开发团队
**下次审查**: T305.1
