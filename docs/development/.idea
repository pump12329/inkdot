ai测试页面完善细则：

1. 多模型AI API测试功能
   - 支持接入和切换多家AI服务商（如DeepSeek、OpenAI、OpenRouter等），可动态选择API Key、模型、参数（温度、最大Token等）。
   - 提供统一的输入区域，用户可输入自定义Prompt，选择目标模型进行测试。
   - 支持批量测试：同一Prompt可一键发送到多个模型，自动收集并展示各自响应结果。

2. 模型对比窗口
   - 设计多栏/分栏对比界面，展示不同模型的输出结果，便于横向对比。
   - 支持结果高亮、差异对比、复制输出内容。
   - 可保存对比历史，便于后续分析。

3. 提示词工程配置
   - 提供Prompt模板管理功能，支持保存、编辑、快速插入常用Prompt。
   - 支持变量占位符，便于批量测试不同参数组合。
   - 可配置系统提示（system prompt）、用户提示（user prompt）等多种角色。

4. Agent数据库编辑
   - 支持对AI Agent相关的数据库（如Prompt库、模型配置、测试用例等）进行增删改查。
   - 提供可视化表格或表单界面，便于管理和批量导入导出。
   - 支持版本管理和回溯，防止误操作丢失数据。

5. 其他细节
   - 支持API调用日志查看、错误信息展示、响应时间和Token消耗统计。
   - 可配置请求超时、重试机制。
   - 支持多用户协作和权限管理（如只读/可编辑）。





请优先完成sidebar，outline render ，workspace插件作为核心插件，并确保插件能正常加载使用，但不要在插件加载和管理代码中使用硬编码
统一的插件config文件


你的核心观点完整总结（最终版）
基于我们的对话，我重新整理出你的完整观点和需求：
🎯 项目初衷与目标
以思维导图为载体，借助AI实现多种创作功能
支持小说创作、跑团、文字冒险等不同创作模式
专注于灵活的插件系统来支持这些不同的创作需求
希望AI Agent作为真正的创作伙伴，而不是简单的工具
⚠️ 对复杂架构的担忧
过度工程化 - 我最初提出的架构过于复杂，超出了实际需求
缺乏扩展性 - 第二个架构虽然考虑了扩展性，但缺乏统一标准
复杂性失控 - 担心架构变得过于复杂，难以维护和开发
自由度与复杂度矛盾 - 要增加自由度，就需要暴露更多API，但这样会让管理和开发变得吃力
✅ 你的核心要求
统一标准 - 插件开发需要统一的标准、API、架构
Agent统一 - 所有Agent都要遵循统一的接口规范
简单可扩展 - 既要保持简单，又要具备扩展性
符合实际 - 架构要符合你的实际需求，而不是过度设计
一个标准，所有功能 - 这是解决复杂性的关键
🔧 技术架构偏好
SDK + MCP服务 - 你提出的解决方案，但用途不同：
SDK - 用于开发插件，简化插件开发复杂度
MCP - 用于外接AI来辅助开发过程
平衡自由度与复杂度 - 既要提供足够的自由度，又要避免过度复杂的API
服务化架构 - 通过MCP服务提供核心功能，通过SDK简化开发
渐进式开发 - 先实现核心功能，逐步添加创作模式
🤖 Agent架构偏好
Agent与n8n相兼容 - 使用n8n进行工作流管理
使用LangChain架构 - 利用LangChain的强大Agent框架
可视化工作流 - 通过n8n实现可视化的工作流设计和管理
##️ 开发工具需求
Cursor Memory - 用于记录项目架构和技术决策
User Rules - 建立统一的代码风格和架构原则
Project Rules - 渐进式添加项目规则，避免过度约束
完整测试体系 - 需要合适的测试体系来确保质量
创作模式需求
小说创作：情节生成、角色管理、世界观构建
跑团模式：GM助手、随机事件、规则解释
文字冒险：剧情分支、选择系统、结局管理
关键洞察
"一个标准，所有功能" - 所有Agent实现同一个接口，统一的输入输出格式
"要增加自由度，就需要暴露更多API，让管理和开发变得吃力" - 这是架构设计的核心矛盾
"SDK + MCP服务" - 这是你找到的平衡自由度和复杂度的最佳方案，但用途不同：
SDK用于插件开发
MCP用于AI辅助开发
"渐进式添加project rule" - 避免一开始就过度约束，根据项目发展逐步完善
"Agent与n8n相兼容使用LangChain架构" - 利用LangChain的Agent能力和n8n的工作流管理
最终目标
一个以思维导图为核心、AI Agent为创作伙伴、插件系统为扩展机制的创意创作平台，通过SDK（插件开发）+ MCP（AI辅助开发）+ LangChain（Agent框架）+ n8n（工作流管理）的架构，既保持简单易用，又具备强大的扩展能力，同时通过渐进式规则和完整测试体系确保开发质量和可维护性。
你的核心原则
简单性 - 避免过度工程化
统一性 - 统一的标准和接口
可扩展性 - 支持多种创作模式
实用性 - 符合实际需求
渐进性 - 逐步完善，避免一次性过度设计
职责分离 - SDK专注插件开发，MCP专注AI辅助，LangChain专注Agent能力，n8n专注工作流管理
架构角色定义
SDK - 插件开发工具，用于第三方开发者开发插件
MCP - AI辅助开发，用于外接AI来辅助开发过程
LangChain - Agent框架，提供强大的Agent能力和工具生态
n8n - 工作流管理，提供可视化的工作流设计和执行
核心平台 - 思维导图引擎 + Agent运行时 + 插件管理器
你的观点非常清晰和一致：在保持简单性的前提下，通过统一标准实现可扩展性，用SDK（插件开发）+ MCP（AI辅助开发）+ LangChain（Agent框架）+ 

避免文档混乱请有条理的生成在分级目录
添加checkpoint